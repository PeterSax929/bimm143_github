{
  "hash": "9418b6937edd8d6d61a924bc1b526221",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Class 6: R functions\"\nauthor: \"Peter Sax\"\nformat: html\ntoc: true\n---\n\n\n\nLet's start writing our first silly function to add some numbers:\n\nEvery R function has 3 things:\n\n- name (we get to pick this)\n- input arguments (there are loads of these separated by a comma)\n- the body (the R code that does the work)\n\n## 1. Generate `add` function\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nadd <- function(x, y){x + y}\n```\n:::\n\n\n\nI can just use this function\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nadd(1,100)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 101\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nadd(c(1,2,3,4), 100)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 101 102 103 104\n```\n\n\n:::\n:::\n\n\nWe can set a default for x or y so that we can run the function with only one argument\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nadddefault <- function(x, y=10){x + y}\nadddefault(1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 11\n```\n\n\n:::\n\n```{.r .cell-code}\nadddefault(1, 100)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 101\n```\n\n\n:::\n:::\n\n\n## 2. Generate DNA Sequence\n\n> Q. Write a function to return a nucleotide sequence of a user specified length? Call it `generate_dna()`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngenerate_dna <- function(size){\n  \n  nucleotides <- c(\"A\",\"T\",\"C\",\"G\")\n  sample(nucleotides, size, replace = TRUE)\n}\n\ngenerate_dna(5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"A\" \"T\" \"G\" \"T\" \"A\"\n```\n\n\n:::\n\n```{.r .cell-code}\ngenerate_dna(20)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"C\" \"G\" \"G\" \"C\" \"A\" \"C\" \"T\" \"T\" \"T\" \"C\" \"A\" \"T\" \"C\" \"G\" \"A\" \"T\" \"A\" \"C\" \"A\"\n[20] \"A\"\n```\n\n\n:::\n:::\n\n\nI want the ability to return a sequence like \"AGTACCTG\" where the result is only one element.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngenerate_dna2 <- function(size, together = TRUE){\n  nucleotides <- c(\"A\",\"T\",\"C\",\"G\")\n  sequence <- sample(nucleotides, size=size, replace = TRUE)\n  if(together) {sequence <- paste(sequence, collapse=\"\")}\n  return(sequence)\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngenerate_dna2(10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"TTAAGTGCTG\"\n```\n\n\n:::\n\n```{.r .cell-code}\ngenerate_dna2(10, together=FALSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"C\" \"C\" \"G\" \"T\" \"C\" \"G\" \"C\" \"G\" \"A\" \"G\"\n```\n\n\n:::\n:::\n\n\n## 3. Generate protein sequence\n\nWe can get the set of 20 natural amino acids from the **bio3d** package.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#install.packages(\"bio3d\")\n```\n:::\n\n\n\n> Q. Write a function, `generate_protein()` to return protein sequences of a user specified length\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngenerate_protein1 <- function(size=5, together = TRUE){\n  aminos <- c(\"A\", \"R\", \"N\", \"D\", \"C\", \"Q\", \"E\", \"G\", \"H\", \"I\", \"L\", \"K\", \"M\", \"F\", \"P\", \"S\", \"T\",\"W\", \"Y\", \"V\")\n  protseq <- sample(aminos, size=size, replace=TRUE)\n  if(together){protseq <- paste(protseq, collapse = \"\")}\n  return(protseq)\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngenerate_protein1(11)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"NATRQIQEWDC\"\n```\n\n\n:::\n:::\n\n\n> Q. Write a function that generates sequences of length 6 to 12.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsapply(6:12, generate_protein1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"NVTCCM\"       \"SLLVFHN\"      \"QDDADEPK\"     \"WAWKDMGHW\"    \"KKAPMKTKNG\"  \n[6] \"ASLQLHLERLA\"  \"FLKMVQATVELI\"\n```\n\n\n:::\n:::\n\n\nIt would be cool and useful if I could get FASTA format output.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nans <- sapply(6:12, generate_protein1)\nans\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"CTMFST\"       \"GSDIMAW\"      \"GNRHSQEG\"     \"SVEVMNCLG\"    \"NLQQVLECIR\"  \n[6] \"LLASFIKYAFC\"  \"TVYWVTLRWLYV\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncat(paste(\">ID.\", 6:12,\"\\n\", ans, sep = \"\"), sep=\"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n>ID.6\nCTMFST\n>ID.7\nGSDIMAW\n>ID.8\nGNRHSQEG\n>ID.9\nSVEVMNCLG\n>ID.10\nNLQQVLECIR\n>ID.11\nLLASFIKYAFC\n>ID.12\nTVYWVTLRWLYV\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nid.line <- paste(\">ID.\", 6:12, sep = \"\")\nseq.line <- paste(id.line, ans, sep = \"\\n\")\ncat(seq.line, sep = \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n>ID.6\nCTMFST\n>ID.7\nGSDIMAW\n>ID.8\nGNRHSQEG\n>ID.9\nSVEVMNCLG\n>ID.10\nNLQQVLECIR\n>ID.11\nLLASFIKYAFC\n>ID.12\nTVYWVTLRWLYV\n```\n\n\n:::\n:::\n\n\n> Q. Determine if these sequences can be found in nature or if they are unique.\n\nAfter using a BLASTp search by inputting the FASTA code, I determined that length 9, 10, 11, 12 are unique, but 6, 7, 8 are not because there are sequences with 100% coverage and identity.\n\n\n",
    "supporting": [
      "class06_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}